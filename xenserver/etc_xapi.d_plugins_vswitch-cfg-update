#!/usr/bin/env python
#
# xapi plugin script to update the cache of configuration items in the
# ovs-vswitchd configuration file that are managed in the xapi database
# when integrated with Citrix management tools.

# Copyright (C) 2009 Nicira Networks, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at:
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# TBD: - error handling needs to be improved.  Currently this can leave
# TBD:   the system in a bad state if anything goes wrong.

import XenAPIPlugin
import XenAPI
import os
import subprocess

vsctl="/usr/bin/ovs-vsctl"
cacert_filename="/etc/ovs-vswitchd.cacert"

# Delete the CA certificate, so that we go back to boot-strapping mode
def delete_cacert():
    try:
        os.remove(cacert_filename)
    except OSError:
        # Ignore error if file doesn't exist
        pass

def update(session, args):
    pools = session.xenapi.pool.get_all()
    # We assume there is only ever one pool...
    if len(pools) == 0:
        raise XenAPIPlugin.Failure("NO_POOL_FOR_HOST", [])
    if len(pools) > 1:
        raise XenAPIPlugin.Failure("MORE_THAN_ONE_POOL_FOR_HOST", [])
    pool = session.xenapi.pool.get_record(pools[0])
    try:
        controller = pool["other_config"]["vSwitchController"]
    except KeyError, e:
        controller = ""
    currentController = vswitchCurrentController()
    if controller == "" and currentController != "":
        delete_cacert()
        removeControllerCfg()
        return "Successfully removed controller config"
    elif controller != currentController:
        delete_cacert()
        setControllerCfg(controller)
        return "Successfully set controller to " + controller
    else:
        return "No change to configuration"

def vswitchCurrentController():
    controller = vswitchCfgQuery("get-controller")
    if controller == "":
        return controller
    if len(controller) < 4 or controller[0:4] != "ssl:":
        return controller
    else:
        return controller[4:]

def removeControllerCfg():
    vswitchCfgMod(["--", "del-controller",
                   "--", "del-ssl"])

def setControllerCfg(controller):
    vswitchCfgMod(["--", "del-controller",
                   "--", "del-ssl",
                   "--", "--bootstrap", "set-ssl",
                   "/etc/xensource/xapi-ssl.pem",
                   "/etc/xensource/xapi-ssl.pem",
                   "/etc/ovs-vswitchd.cacert",
                   "--", "set-controller", "ssl:" + controller])

def vswitchCfgQuery(action):
    cmd = [vsctl, "-vANY:console:emer", action]
    output = subprocess.Popen(cmd, stdout=subprocess.PIPE).communicate()
    if len(output) == 0 or output[0] == None:
        output = ""
    else:
        output = output[0].strip()
    return output

def vswitchCfgMod(action_args):
    cmd = [vsctl, "-vANY:console:emer"] + action_args
    exitcode = subprocess.call(cmd)
    if exitcode != 0:
        raise XenAPIPlugin.Failure("VSWITCH_CONFIG_MOD_FAILURE",
                                   [ str(exitcode) , str(action_args) ])
    
if __name__ == "__main__":
    XenAPIPlugin.dispatch({"update": update})
